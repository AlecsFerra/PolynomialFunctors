{-# OPTIONS --guardedness --allow-unsolved-metas #-}

module GeneralizedPolynomial where

open import Data.Empty using (‚ä•-elim; ‚ä•)
open import Data.Unit using (‚ä§)
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ)
open import Data.Product
  using (_√ó_; ‚àÉ-syntax; _,_; proj‚ÇÅ; proj‚ÇÇ)
open import Data.Nat
  using (‚Ñï; suc; _<_; _‚â§_; _‚äî_; s‚â§s; z‚â§n; _‚âü_; _‚â§?_; _<?_;
        pred; _‚à∏_; _+_)
open import Data.Nat.Properties
  using (‚â§-reflexive; ‚â§-trans; ‚â§-step; n‚â§1+n; ‚â§‚àß‚â¢‚áí<; ‚â§-pred;
        ‚âÆ‚áí‚â•; m‚â§m‚äîn; m‚â§n‚äîm; m<n‚áím‚â§1+n; m‚â§n‚áím<n‚à®m‚â°n)
open import Data.Nat.Induction using (<-rec)

open import Relation.Nullary using (yes; no; ¬¨_)
open import Relation.Nullary.Decidable
  using (True; toWitness; fromWitness)
open import Relation.Nullary.Negation
  using (contradiction)

open import relation.binary.propositionalequality
    using (refl; ‚â¢-sym; _‚â°_)

infixl 6 _‚äï·µ£_
infixl 7 _‚äó·µ£_
infixl 6 _‚äï_
infixl 7 _‚äó_
infixr 8 Œº_
infixr 8 ŒΩ_
infixr 8 wk_
infixl 8 _[_]

private module ‚Ñïextra where
  m‚â§n‚áím‚â§1+n : ‚àÄ {m n} ‚Üí m ‚â§ n ‚Üí m ‚â§ 1 + n
  m‚â§n‚áím‚â§1+n z‚â§n       = z‚â§n
  m‚â§n‚áím‚â§1+n (s‚â§s m‚â§n) = s‚â§s (m‚â§n‚áím‚â§1+n m‚â§n)

  lemma : (n m : ‚Ñï) ‚Üí (n ‚â§ suc m) ‚Üí ¬¨ (n ‚â° suc m) ‚Üí n ‚â§ m
  lemma m n n‚â§m n‚â¢m with m‚â§n‚áím<n‚à®m‚â°n n‚â§m
  ... | inj‚ÇÅ n<m = ‚â§-pred n<m
  ... | inj‚ÇÇ n‚â°m = contradiction n‚â°m n‚â¢m

open ‚Ñïextra

data Polynomial : ‚Ñï ‚Üí Set‚ÇÅ where
    I_   : (n : ‚Ñï) ‚Üí Polynomial (suc n)
    K_   : Set ‚Üí Polynomial 0
    Œº_   : {n : ‚Ñï} ‚Üí Polynomial (suc n) ‚Üí Polynomial n
    ŒΩ_   : {n : ‚Ñï} ‚Üí Polynomial (suc n) ‚Üí Polynomial n

    -- Shouldn't be used explicitly by users of the lib
    _‚äï·µ£_ : {n : ‚Ñï} ‚Üí Polynomial n ‚Üí Polynomial n ‚Üí Polynomial n
    _‚äó·µ£_ : {n : ‚Ñï} ‚Üí Polynomial n ‚Üí Polynomial n ‚Üí Polynomial n
    wk·µ£_  : {n : ‚Ñï} ‚Üí Polynomial n ‚Üí Polynomial (suc n)
    _[_]  : {n : ‚Ñï} ‚Üí Polynomial (suc n) ‚Üí Polynomial n ‚Üí Polynomial n

-- Versions that infer weakening
wk·µ¢ : {n m : ‚Ñï} ‚Üí Polynomial n ‚Üí (n ‚â§ m) ‚Üí Polynomial m
wk·µ¢ {0}     {0}     P n‚â§m = P
wk·µ¢ {n}     {suc m} P n‚â§m with n ‚âü suc m
... | yes refl = P
... | no n‚â¢m   = wk·µ£ (wk·µ¢ {n} {m} P (lemma n m n‚â§m n‚â¢m))

wk_ : {n m : ‚Ñï} ‚Üí Polynomial n ‚Üí {True (n ‚â§? m)} ‚Üí Polynomial m
wk_ P {n‚â§m} = wk·µ¢ P (toWitness n‚â§m)

_‚äó_ : {n m : ‚Ñï} ‚Üí Polynomial n ‚Üí Polynomial m ‚Üí Polynomial (n ‚äî m)
L ‚äó R = (wk·µ¢ L (m‚â§m‚äîn _ _)) ‚äó·µ£ (wk·µ¢ R (m‚â§n‚äîm _ _))

_‚äï_ : {n m : ‚Ñï} ‚Üí Polynomial n ‚Üí Polynomial m ‚Üí Polynomial (n ‚äî m)
L ‚äï R = (wk·µ¢ L (m‚â§m‚äîn _ _)) ‚äï·µ£ (wk·µ¢ R (m‚â§n‚äîm _ _))


ùüò : Polynomial 0
ùüò = K ‚ä•

ùüô : Polynomial 0
ùüô = K ‚ä§

infixl 3 _,‚ü®_‚ü©_
data Context : ‚Ñï ‚Üí Set‚ÇÅ where
  ‚àÖ      : Context 0
  _,‚ü®_‚ü©_ : {n m : ‚Ñï} ‚Üí Context n ‚Üí (m ‚â§ n) ‚Üí Polynomial m ‚Üí Context (suc n)

infixl 3 _‚àô_
_‚àô_ : {n m : ‚Ñï} ‚Üí Context n ‚Üí {True (m ‚â§? n)} ‚Üí Polynomial m ‚Üí Context (suc n)
_‚àô_ ctx {m‚â§n} P = ctx ,‚ü® toWitness m‚â§n ‚ü© P

lookup : {n : ‚Ñï} ‚Üí Context n ‚Üí (m : ‚Ñï) ‚Üí (m < n) ‚Üí ‚àÉ[ p ] Polynomial p √ó p < n
lookup (ctx ,‚ü® m‚â§n ‚ü© X) 0       p                     = _ , X , s‚â§s m‚â§n
lookup (ctx ,‚ü® _   ‚ü© _) (suc m) (s‚â§s p) with lookup ctx m p
...                                     | p , X , p<n = p , X , ‚â§-step p<n

mutual
  {-# TERMINATING #-}
  eval : {n m : ‚Ñï} ‚Üí (n ‚â§ m) ‚Üí Polynomial n ‚Üí Context m ‚Üí Set
  eval m‚â§n (I k)     ctx with lookup ctx k m‚â§n
  ...                    | p , X , s‚â§s p<n = eval (‚â§-step p<n) X ctx
  eval n‚â§m (K x)     ctx                   = x
  eval n‚â§m (L ‚äó·µ£ R)  ctx                   = eval n‚â§m L ctx √ó eval n‚â§m R ctx
  eval n‚â§m (L ‚äï·µ£ R)  ctx                   = eval n‚â§m L ctx ‚äé eval n‚â§m R ctx
  eval n‚â§m (Œº P)     ctx                   = LeastFixpoint n‚â§m P ctx
  eval n‚â§m (ŒΩ P)     ctx                   = GreatestFixpoint n‚â§m P ctx
  eval n‚â§m (wk·µ£ P)   ctx                   = eval (‚â§-pred (m‚â§n‚áím‚â§1+n n‚â§m)) P ctx
  eval n‚â§m (F [ G ]) ctx                   = eval (s‚â§s n‚â§m) F (ctx ,‚ü® n‚â§m ‚ü© G)

  data LeastFixpoint {n m : ‚Ñï}
    (n‚â§m : n ‚â§ m) (P : Polynomial (suc n)) (ctx : Context m) : Set where
    Œº‚ü®_‚ü© : eval (s‚â§s n‚â§m) P (ctx ,‚ü® n‚â§m ‚ü© Œº P) ‚Üí LeastFixpoint n‚â§m P ctx

  record GreatestFixpoint {n m : ‚Ñï}
    (n‚â§m : n ‚â§ m) (P : Polynomial (suc n)) (ctx : Context m) : Set where
    coinductive
    field rest : eval (s‚â§s n‚â§m) P (ctx ,‚ü® n‚â§m ‚ü© ŒΩ P)


‚ü¶_‚üß : {n m : ‚Ñï} ‚Üí {n‚â§m : True (n ‚â§? m)} ‚Üí Polynomial n ‚Üí Context m ‚Üí Set
‚ü¶_‚üß {_} {_} {n‚â§m} F ctx = eval (toWitness n‚â§m) F ctx

‚ü¶_‚üß‚ÇÅ : Polynomial 1 ‚Üí Set ‚Üí Set
‚ü¶ P ‚üß‚ÇÅ X = ‚ü¶ P ‚üß (‚àÖ ‚àô K X)

‚ü¶_‚üß‚ÇÄ : Polynomial 0 ‚Üí Set
‚ü¶ P ‚üß‚ÇÄ = ‚ü¶ P ‚üß ‚àÖ
